1.算法的时间复杂度分为多项式级时间复杂度与非多项式级时间复杂度，我们来重温一下时间复杂度的排名：
O(1) < O(logn) < O(n) < O(nlogn) < O(n^2) < O(n^3) < O(2^n)< O(n!)
其中,O(n!)与O(2^n)被称为非多项式级时间复杂度，增长速度大于且远远大于前面的多项式级时间复杂度。
2.当遇到时间复杂度为  n!  的算法时，首先考虑的是使用分治的方式将问题规模缩小。因为  !n  的增长率是恐怖的，缩小问题规模，
时间复杂度的优化效果也将是立竿见影的。
下面看一个很简单的例子，8的阶乘是远大于两个4的阶乘的和的：
8的阶乘是40320。我们如果将问题分解，比如对半分则我们将得到两个问题规模为4的子问题，时间复杂度为4的阶乘加4的阶乘等于48。
3.在将规模为8的原问题分解为两个子问题时，我们将会有6种分法，为了覆盖解空间我们需要将所有子问题的分解方式都尝试一次，
则尝试所有分法的计算次数为∑(k! +(n-k)!),其中0<k<n。
以问题规模为8时为例，将问题分为两个子问题的计算次数将是1804，与原问题计算40320次时相比，性能得到了极大的提升。
