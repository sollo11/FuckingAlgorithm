-- SELECT * FROM table LIMIT 5,10;  // 检索记录行 6-15
-- SELECT * FROM table LIMIT 5;     //检索前 5 个记录行
-- SELECT * FROM table LIMIT 95,-1; // 检索记录行 96-最后一行.
-- limit y 分句表示: 读取 y 条数据
-- limit x, y 分句表示: 跳过 x 条数据，读取 y 条数据
-- limit y offset x 分句表示: 跳过 x 条数据，读取 y 条数据
-- 选取第二高的薪水
select nullif((select distinct Salary from Employee order by Salary desc limit 1,1),null) as SecondHighestSalary

--选取第n高的薪水
--url：https://leetcode-cn.com/problems/nth-highest-salary/submissions/
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  declare c int default if(N>0,N-1,1);
  RETURN (
      --Write your MySQL query statement below.
      -- 将工资分组然后降序排序，这样使用group by 就去重了，排序不会出现重复工资
      select Salary from Employee group by Salary order by Salary desc limit c,1
  );
END
--对于a表中的每一个分数score，找出b表(已经去重)中有多少个大于或等于该分数的不同的分数，该值作为rank,然后对a表按分数降序排列
--url:https://leetcode-cn.com/problems/rank-scores/
select a.Score as Score ,(select count(distinct b.Score) from Scores b where b.Score>=a.Score) as rank from Scores a order by Score desc;

--left join与on结合使用，右边的表如果没有与左表匹配上的，也返回
--写的顺序：select ... from... where.... group by... having... order by..
--having使用：having count(*)>15