package 数组中数字出现的次数I;

/**
 * @description：
 * 相同的数异或为0，不同的异或不为0（因为1^1=0,1^0=1，0^1=1，0^0=0）。0和任何数异或等于这个数本身。
 * 而且a^b^c=a^c^b，符合随机组合，0^a=a
 * 所以，数组里面所有数异或 = 目标两个数异或。由于这两个数不同，所以异或结果必然不为0。
 * 假设数组异或的二进制结果为10010，那么说明这两个数从右向左数第2位是不同的
 * 那么可以根据数组里面所有数的第二位为0或者1将数组划分为2个。
 * 这样做可以将目标数必然分散在不同的数组中，而且相同的数必然落在同一个数组中。
 * 这两个数组里面的数各自进行异或，得到的结果就是答案。
 * @url： https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/
 * @限制：
 * @author：Jack
 * @createTime：2020/4/1 10:46
 * @level：
 */
public class Solution {
    // 假设结果数为A B
    public int[] singleNumbers(int[] nums) {
        int x = 0; // 用于记录 A B 的异或结果
        /** 得到A^B的结果
         基于异或运算的以下几个性质
         1. 交换律
         2. 结合律
         3. 对于任何数x，都有x^x=0，x^0=x
         */
        for (int val : nums) x ^= val;
        // 0010 ->2
        //^1010 ->10
        //=1000 ->x=8
        // x & (-x)本身的作用是得到最低位的1，
        //例如：
        //10110->22=x
        //-22,其实就是在22的值的基础上进行按位取反(~x)之后再增加1所得
        //01010->-22
        //00010，也就是22的二进制最后一位1，前后都是0的二进制所代表的数
        //说明A和B这两个数从右到左第二位是不同的，一个为1，一个为0
        //然后根据数组里面所有数的第二位为0或者1将数组划分为2个
        //这样做可以将目标数必然分散在不同的数组中，而且相同的数必然落在同一个数组中
        //这两个数组里面的数各自进行异或，分别得到A和B
        int flag = x & (-x);
//        System.out.println(flag);
        //得到这个二进制只有一个1的数字后，我们再次遍历nums数组
        //由于x代表的是A^B
        //而且根据异或的自反性，可以得出A^B^B=A，A^B^A=B
        //
        // 而我们所需要的做到的是：利用这个1来进行分组，也就是做到将A和B区分开
        //在代码上，我们使用flag这个只有一个1的数和nums数组分别进行相与，因为flag其它位
        //均为0，那么其相与的结果取决于该数在这个位上的数字
        // 前面已经知道，x是我们需要的结果数A和B相异或的结果，也就是说，x的二进制串上的任何一个1，都能成为区分A和B的条件
        // 因此我们只需要得到x上的任意一个1，就可以做到将A和B区分开来

        int res = 0; // 用于记录A或B其中一者,x^0=x

        // 分组操作
        for (int val : nums) {
            // 根据二进制位上的那个“1”进行分组
            // 需要注意的是，分组的结果必然是相同的数在相同的组，且还有一个结果数
            // 因此每组的数再与res=0一路异或下去，最终会得到那个结果数A或B
            // 且由于异或运算具有自反性，因此只需得到其中一个数即可
            if ((flag & val) != 0) { //如果该位上相同为1，就和它异或（相同的数字会把它抵消）
                res ^= val;
            }
        }
        //此时res=A或B,而x=A^B
        // 利用先前的x进行异或运算得到另一个，即利用自反性
        return new int[] {res, x ^ res};
    }

    public static void main(String[] args) {
        int[] nums={1,2,10,4,1,4,3,3};
        int res[]=new Solution().singleNumbers(nums);
    }
}
